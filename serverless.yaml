service:
  name: serverless-blog

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
custom:
  webpack:
    webpackConfig: "./webpack.config.js"
    includeModules: true
  documentation:
    api:
      info:
        version: 1.0.0
        title: Serverless Blog
        description: Serverless application
package:
  individually: true
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  tracing:
    lambda: true
    apiGateway: true

  environment:
    BLOGS_TABLE: blogs-table-${self:provider.stage}
    BLOG_BUCKET: blogs-${self:provider.stage}-daniel-show-oops
    BLOGS_CREATED_AT_INDEX: BlogsCreatedAtIndex
    SIGNED_URL_EXPIRATION: 300

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetBlogs:
    handler: src/lambda/http/getBlogs.handler
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:Query        
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
    events:
      - http:
          method: get
          path: blogs
          cors: true
  GetUserBlogs:
    handler: src/lambda/http/getUserBlogs.handler
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:Query       
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
    events:
      - http:
          method: get
          path: blogs/user/mine
          cors: true
          authorizer: Auth
  CreateBlog:
    handler: src/lambda/http/createBlog.handler
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:PutItem       
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
    events:
      - http:
          method: post
          path: blogs
          cors: true
          authorizer: Auth
  UpdateBlog:
    handler: src/lambda/http/updateBlog.handler
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:UpdateItem       
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
    events:
      - http:
          method: patch
          path: blogs/{blogId}
          cors: true
          authorizer: Auth
  DeleteBlog:
    handler: src/lambda/http/deleteBlog.handler
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:DeleteItem       
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
    events:
      - http:
          method: delete
          path: blogs/{blogId}
          cors: true
          authorizer: Auth
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:Query        
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: Allow
        Action:
        - s3:PutObject
        - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.BLOG_BUCKET}/*
    events:
      - http:
          method: post
          path: blogs/{blogId}/attachment
          cors: true
          authorizer: Auth

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    BlogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: blogId
          AttributeType: S
        - AttributeName: published
          AttributeType: S
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: blogId
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BLOGS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BLOGS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: published
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    BlogBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:provider.environment.BLOG_BUCKET}"
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders:
            - "*"
            AllowedMethods:
            - GET
            - PUT
            - POST
            - DELETE
            - HEAD
            AllowedOrigins:
            - "*"
            MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: MyPolicy
          Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: arn:aws:s3:::${self:provider.environment.BLOG_BUCKET}/*
        Bucket: "${self:provider.environment.BLOG_BUCKET}"
